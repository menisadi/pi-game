import json
import time

# Define file path for history storage (modify as needed)
history_file = "pi_memorization_history.json"


def load_history():
    """
    Loads past test history from the history file.
    """
    try:
        with open(history_file, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}


def save_history(data):
    """
    Saves test history data to the history file.
    """
    with open(history_file, "w") as f:
        json.dump(data, f, indent=4)


def get_pi_digits(num_digits):
    """
    Extracts the requested number of pi digits.
    """
    from math import pi  # Avoid unnecessary import at runtime

    pi_str = str(pi)[: num_digits + 2]  # Add two extra digits for rounding
    return " ".join(
        pi_str[2:].split(".")[0][:-1:4]
    )  # Format digits in blocks of 4


def test_knowledge(num_digits, interactive=False):
    """
    Tests user's knowledge of pi up to the specified number of digits.
    """
    correct_digits = 0
    actual_pi = get_pi_digits(num_digits)
    user_input = input(
        f"Enter the first {num_digits} digits of pi (separated by spaces): "
    )
    user_digits = user_input.split()

    for i, (user_digit, actual_digit) in enumerate(
        zip(user_digits, actual_pi.split())
    ):
        if user_digit == actual_digit:
            correct_digits += 1
        else:
            if interactive:
                print(
                    f"Wrong digit at position {i+1} (Correct: {actual_digit})"
                )
            else:
                user_digits[i] = f"[**{user_digit}**]"

    wrong_digits = " ".join(user_digits)
    print(f"\nYou got {correct_digits} out of {num_digits} digits correct.")
    print(f"Incorrect digits highlighted: {wrong_digits}")

    # Update and save history
    today = time.strftime("%Y-%m-%d")
    history = load_history()
    history[today] = (correct_digits, num_digits)
    save_history(history)


def show_history():
    """
    Displays the history of test results from the history file.
    """
    history = load_history()
    if not history:
        print("No past test results found.")
        return

    print("Date\t\tCorrect\tTotal")
    print("-" * 25)
    for date, (correct, total) in history.items():
        print(f"{date}\t\t{correct}/{total}")


def main():
    import argparse

    parser = argparse.ArgumentParser(description="Practice memorizing pi")
    parser.add_argument(
        "-l",
        "--learn",
        metavar="NUM_DIGITS",
        type=int,
        help="Get first NUM_DIGITS of pi (optional: -d DELAY for delay)",
    )
    parser.add_argument(
        "-t",
        "--test",
        metavar="NUM_DIGITS",
        type=int,
        help="Test knowledge of first NUM_DIGITS (optional: -i for interactive)",
    )
    parser.add_argument(
        "-y", "--history", action="store_true", help="Show past test history"
    )

    args = parser.parse_args()

    if args.learn:
        delay = args.delay or 100  # Default delay of 100 milliseconds
        digits = get_pi_digits(args.learn)
        for digit in digits.split():
            print(digit, end=" ", flush=True)
            time.sleep(delay / 1000)
        print()

    elif args.test:
        interactive = args.interactive or False
        test_knowledge(args.test, interactive)

    elif args.history:
        show_history()

    else:
        parser.print_help()


if __name__ == "__main__":
    main()
